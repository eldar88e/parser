module Hamster
  # 
  # https://2captcha.com/.
  # https://captchas.io/.
  # 
  class CaptchaAdapter

    BASE_URLs = { 
      :two_captcha_com => 'http://2captcha.com/:action.php',
      :captchas_io => 'https://api.captchas.io/:action.php',
    }
    attr_accessor :key, :timeout, :polling, :adapter

    def initialize(adapter = :two_captcha_com, options = {})

      two_captcha_tokens = Storage.new.captcha_keys
      # puts two_captcha_tokens.inspect.green
      if two_captcha_tokens.keys.include?(adapter.to_s)
        key = two_captcha_tokens[adapter]
      end
      if key.nil?
        raise ArgumentError, "The captcha key for the adapter :#{adapter.to_s} not provided in config.yml. Add captcha key in config.yml. For example 
            captcha_keys:
              two_captcha_com: 3faa98b3c9e2254ebe22a3eb7cacxxxx
              captchas_io: 53051exx-63ed01df339bxx.742204xx"
      end
      if key.length != 32
        raise ArgumentError, "Wrong key to token or wrong token to captcha solver.
              The token must be 32 characters long or your config doesn't have keys for captcha solver.
              Please, check your config file."
      end
      
      self.adapter = adapter
      self.key     = key
      self.timeout = options[:timeout] || 60
      self.polling = options[:polling] || 5
    end

    # Decode the text from an image (i.e. solve a captcha).
    #
    # @param [Hash] options Options hash. Check docs for the method decode!.
    #
    # @return [TwoCaptcha::Captcha] The captcha (with solution) or an empty
    #                               captcha instance if something goes wrong.
    #
    def decode_image(options = {})
      decode_image!(options)
    rescue TwoCaptcha::Error => ex
      TwoCaptcha::Captcha.new
    end
    alias :decode :decode_image

    # Decode the text from an image (i.e. solve a captcha).
    #
    # @param [Hash] options Options hash.
    # @option options [String]  :url   URL of the image to be decoded.
    # @option options [String]  :path  File path of the image to be decoded.
    # @option options [File]    :file  File instance with image to be decoded.
    # @option options [String]  :raw   Binary content of the image to be
    #                                  decoded.
    # @option options [String]  :raw64 Binary content encoded in base64 of the
    #                                  image to be decoded.
    # @option options [Integer] :phrase         (0) https://2captcha.com/setting
    # @option options [Integer] :regsense       (0) https://2captcha.com/setting
    # @option options [Integer] :numeric        (0) https://2captcha.com/setting
    # @option options [Integer] :calc           (0) https://2captcha.com/setting
    # @option options [Integer] :min_len        (0) https://2captcha.com/setting
    # @option options [Integer] :max_len        (0) https://2captcha.com/setting
    # @option options [Integer] :language       (0) https://2captcha.com/setting
    # @option options [Integer] :header_acao    (0) https://2captcha.com/setting
    # @option options [Integer] :id_constructor (0) 23 if new reCAPTCHA.
    # @option options [Integer] :coordinatescaptcha (0) 1 if clickable captcha.
    #
    # @return [TwoCaptcha::Captcha] The captcha (with solution) if an error is
    #                               not raised.
    #
    def decode_image!(options = {})
      started_at = Time.now

      raw64 = load_captcha(options)
      fail(TwoCaptcha::InvalidCaptcha) if raw64.to_s.empty?

      decoded_captcha = upload(options.merge(raw64: raw64))

      # pool untill the answer is ready
      while decoded_captcha.text.to_s.empty?
        sleep(polling)
        decoded_captcha = captcha(decoded_captcha.id)
        fail TwoCaptcha::Timeout if (Time.now - started_at) > timeout
      end

      decoded_captcha
    end
    alias :decode! :decode_image!

    #
    # Solve reCAPTCHA v2.
    #
    # @param [Hash] options Options hash. Check docs for the method decode!.
    #
    # @return [TwoCaptcha::Captcha] The solution of the given captcha.
    #
    def decode_recaptcha_v2(options = {})
      decode_recaptcha_v2!(options)
    rescue TwoCaptcha::Error => ex
      TwoCaptcha::Captcha.new
    end

    #
    # Solve reCAPTCHA v2.
    #
    # @param [Hash] options Options hash.
    # @option options [String]  :googlekey The open key of the site in which recaptcha is installed.
    # @option options [String]  :pageurl The URL of the page where the recaptcha is encountered.
    #
    # @return [TwoCaptcha::Captcha] The solution of the given captcha.
    #
    def decode_recaptcha_v2!(options = {})
      started_at = Time.now

      fail(TwoCaptcha::GoogleKey) if options[:googlekey].empty?

      upload_options = { method: 'userrecaptcha' }.merge(options)
      decoded_captcha = upload(upload_options)

      # pool untill the answer is ready
      while decoded_captcha.text.to_s.empty?
        sleep([polling, 10].max) # sleep at least 10 seconds
        decoded_captcha = captcha(decoded_captcha.id)
        fail TwoCaptcha::Timeout if (Time.now - started_at) > timeout
      end

      decoded_captcha
    end

    #
    # Solve reCAPTCHA v3.
    #
    # @param [Hash] options Options hash. Check docs for the method decode!.
    #
    # @return [TwoCaptcha::Captcha] The solution of the given captcha.
    #
    def decode_recaptcha_v3(options = {})
      decode_recaptcha_v3!(options)
    rescue TwoCaptcha::Error => ex
      TwoCaptcha::Captcha.new
    end

    #
    # Solve reCAPTCHA v3.
    #
    # @param [Hash] options Options hash.
    # @option options [String]  :googlekey The open key of the site in which recaptcha is installed.
    # @option options [String]  :pageurl The URL of the page where the recaptcha is encountered.
    # @option options [String]  :action The action paramenter present on the page that uses recaptcha.
    # @option options [String]  :min_score The minimum score necessary to pass the challenge.
    #
    # @return [TwoCaptcha::Captcha] The solution of the given captcha.
    #
    def decode_recaptcha_v3!(options = {})
      started_at = Time.now

      fail(TwoCaptcha::GoogleKey) if options[:googlekey].empty?

      upload_options = {
        method:  'userrecaptcha',
        version: 'v3',
      }.merge(options)
      decoded_captcha = upload(upload_options)

      # pool untill the answer is ready
      while decoded_captcha.text.to_s.empty?
        sleep([polling, 10].max) # sleep at least 10 seconds
        decoded_captcha = captcha(decoded_captcha.id)
        fail TwoCaptcha::Timeout if (Time.now - started_at) > timeout
      end

      decoded_captcha
    end

    #
    # Solve hCaptcha.
    #
    # @param [Hash] options Options hash. Check docs for the method decode_hcaptcha!.
    #
    # @return [TwoCaptcha::Captcha] The solution of the given captcha.
    #
    def decode_hcaptcha(options = {})
      decode_hcaptcha!(options)
    rescue TwoCaptcha::Error => ex
      TwoCaptcha::Captcha.new
    end

    #
    # Solve hCaptcha.
    #
    # @param [Hash] options Options hash.
    # @option options [String]  :sitekey The  key of the site in which hCaptcha is installed.
    # @option options [String]  :pageurl The URL of the page where the recaptcha is encountered.
    #
    # @return [TwoCaptcha::Captcha] The solution of the given captcha.
    #
    def decode_hcaptcha!(options = {})
      started_at = Time.now

      fail(TwoCaptcha::SiteKey) if options[:sitekey].empty?

      upload_options = { method: 'hcaptcha' }.merge(options)
      decoded_captcha = upload(upload_options)

      # pool untill the answer is ready
      while decoded_captcha.text.to_s.empty?
        sleep([polling, 10].max) # sleep at least 10 seconds
        decoded_captcha = captcha(decoded_captcha.id)
        fail TwoCaptcha::Timeout if (Time.now - started_at) > timeout
      end

      decoded_captcha
    end

    # Upload a captcha to 2Captcha.
    #
    # This method will not return the solution. It helps on separating concerns.
    #
    # @return [TwoCaptcha::Captcha] The captcha object (not solved yet).
    #
    def upload(options = {})
      args = {}
      args[:body]   = options[:raw64] if options[:raw64]
      args[:method] = options[:method] || 'base64'
      args.merge!(options)
      response = request('in', :multipart, args)

      unless response.match(/\AOK\|/)
        fail(TwoCaptcha::Error, 'Unexpected API Response')
      end

      TwoCaptcha::Captcha.new(
        id: response.split('|', 2)[1],
        api_response: response
      )
    end

    # Retrieve information from an uploaded captcha.
    #
    # @param [Integer] captcha_id Numeric ID of the captcha.
    #
    # @return [TwoCaptcha::Captcha] The captcha object.
    #
    def captcha(captcha_id)
      response = request('res', :get, action: 'get', id: captcha_id)

      decoded_captcha = TwoCaptcha::Captcha.new(id: captcha_id)
      decoded_captcha.api_response = response

      if response.match(/\AOK\|/)
        decoded_captcha.text = response.split('|', 2)[1]
      end

      decoded_captcha
    end

    # Report incorrectly solved captcha for refund.
    #
    # @param [Integer] id Numeric ID of the captcha.
    # @param [Integer] action 'reportbad' (default) or 'reportgood'.
    #
    # @return [Boolean] true if correctly reported
    #
    def report!(captcha_id, action = 'reportbad')
      response = request('res', :get, action: action, id: captcha_id)
      response == 'OK_REPORT_RECORDED'
    end

    # Get balance from your account.
    #
    # @return [Float] Balance in USD.
    #
    def balance
      request('res', :get, action: 'getbalance').to_f
    end

    # Get statistics from your account.
    #
    # @param [Date] date Date when the statistics were collected.
    #
    # @return [String] Statistics from date in an XML string.
    #
    def stats(date)
      request('res', :get, action: 'getstats', date: date.strftime('%Y-%m-%d'))
    end

    # Get current load from 2Captcha.
    #
    # @return [String] Load in an XML string.
    #
    def load
      request('load', :get)
    end

    private

    # Load a captcha raw content encoded in base64 from options.
    #
    # @param [Hash] options Options hash.
    # @option options [String]  :url   URL of the image to be decoded.
    # @option options [String]  :path  File path of the image to be decoded.
    # @option options [File]    :file  File instance with image to be decoded.
    # @option options [String]  :raw   Binary content of the image to bedecoded.
    # @option options [String]  :raw64 Binary content encoded in base64 of the
    #                                  image to be decoded.
    #
    # @return [String] The binary image base64 encoded.
    #
    def load_captcha(options)
      if options[:raw64]
        options[:raw64]
      elsif options[:raw]
        Base64.encode64(options[:raw])
      elsif options[:file]
        Base64.encode64(options[:file].read)
      elsif options[:path]
        Base64.encode64(File.open(options[:path], 'rb').read)
      elsif options[:url]
        Base64.encode64(TwoCaptcha::HTTP.open_url(options[:url]))
      else
        fail TwoCaptcha::ArgumentError, 'Illegal image format'
      end
    rescue
      raise TwoCaptcha::InvalidCaptcha
    end

    # Perform an HTTP request to the 2Captcha API.
    #
    # @param [String] action  API method name.
    # @param [Symbol] method  HTTP method (:get, :post, :multipart).
    # @param [Hash]   payload Data to be sent through the HTTP request.
    #
    # @return [String] Response from the TwoCaptcha API.
    #
    def request(action, method = :get, payload = {})
      res = TwoCaptcha::HTTP.request(
        url: BASE_URLs[adapter].gsub(':action', action),
        timeout: timeout,
        method: method,
        payload: payload.merge(key: key, soft_id: 800)
      )
      validate_response(res)
      res
    end

    # Fail if the response has errors.
    #
    # @param [String] response The body response from TwoCaptcha API.
    #
    def validate_response(response)
      if (error = TwoCaptcha::RESPONSE_ERRORS[response])
        fail(error)
      elsif response.to_s.empty? || response.match(/\AERROR\_/)
        fail(TwoCaptcha::Error, response)
      end
    end
  end


  # Error Exception
  class Error < Exception
  end

  class ArgumentError < Error
  end

  class InvalidCaptcha < Error
    def initialize
      super('The captcha is empty or invalid')
    end
  end

  class Timeout < Error
    def initialize
      super('The captcha was not solved in the expected time')
    end
  end

  class GoogleKey < Error
    def initialize
      super('Missing googlekey parameter')
    end
  end

  class SiteKey < Error
    def initialize
      super('Missing sitekey parameter')
    end
  end

  class WrongUserKey < Error
    def initialize
      super('Wrong “key” parameter format, it should contain 32 symbols')
    end
  end

  class InvalidUserKey < Error
    def initialize
      super('The “key” doesn’t exist')
    end
  end

  class ZeroBalance < Error
    def initialize
      super('You don’t have enought money on your account')
    end
  end

  class NoSlotAvailable < Error
    def initialize
      super('The current bid is higher than the maximum bid set for your account.')
    end
  end

  class SmallCaptchaFilesize < Error
    def initialize
      super('CAPTCHA size is less than 100 bytes')
    end
  end

  class BigCaptchaFilesize < Error
    def initialize
      super('CAPTCHA size is more than 100 Kbytes')
    end
  end

  class WrongFileExtension < Error
    def initialize
      super('The CAPTCHA has a wrong extension. Possible extensions are: jpg,jpeg,gif,png')
    end
  end

  class ImageNotSupported < Error
    def initialize
      super('The server cannot recognize the CAPTCHA file type')
    end
  end

  class IpNotAllowed < Error
    def initialize
      super('The request has sent from the IP that is not on the list of your IPs. Check the list of your IPs in the system')
    end
  end

  class IpBanned < Error
    def initialize
      super('The IP address you\'re trying to access our server with is banned due to many frequent attempts to access the server using wrong authorization keys. To lift the ban, please, contact our support team via email: support@2captcha.com')
    end
  end

  class WrongIdFormat < Error
    def initialize
      super('Wrong format ID CAPTCHA. ID must contain only numbers')
    end
  end

  class CaptchaUnsolvable < Error
    def initialize
      super('Captcha could not solve three different employee. Funds for this captcha not')
    end
  end

  class EmptyAction < Error
    def initialize
      super('No action passed')
    end
  end

  class CaptchaImageBlocked < Error
    def initialize
      super('You have sent an image, that is unrecognizable and which is saved in our database as such. Usually this happens when the site where you get the captcha from has stopped sending you captcha and started giving you a “deny access” cap.')
    end
  end

  class WrongCaptchaId < Error
    def initialize
      super('You are trying to get the answer or complain a captcha that was submitted more than 15 minutes ago.')
    end
  end

  class BadDuplicates < Error
    def initialize
      super('Error is returned when 100% accuracy feature is enabled. The error means that max numbers of tries is reached but min number of matches not found.')
    end
  end

  class ReportNotRecorded < Error
    def initialize
      super('Error is returned to your complain request (reportbad) if you already complained lots of correctly solved captchas.')
    end
  end

  RESPONSE_ERRORS = {
    'ERROR_WRONG_USER_KEY'           => TwoCaptcha::WrongUserKey,
    'ERROR_KEY_DOES_NOT_EXIST'       => TwoCaptcha::InvalidUserKey,
    'ERROR_ZERO_BALANCE'             => TwoCaptcha::ZeroBalance,
    'ERROR_NO_SLOT_AVAILABLE'        => TwoCaptcha::NoSlotAvailable,
    'ERROR_ZERO_CAPTCHA_FILESIZE'    => TwoCaptcha::SmallCaptchaFilesize,
    'ERROR_TOO_BIG_CAPTCHA_FILESIZE' => TwoCaptcha::BigCaptchaFilesize,
    'ERROR_WRONG_FILE_EXTENSION'     => TwoCaptcha::WrongFileExtension,
    'ERROR_IMAGE_TYPE_NOT_SUPPORTED' => TwoCaptcha::ImageNotSupported,
    'ERROR_IP_NOT_ALLOWED'           => TwoCaptcha::IpNotAllowed,
    'IP_BANNED'                      => TwoCaptcha::IpBanned,
    'ERROR_WRONG_ID_FORMAT'          => TwoCaptcha::WrongIdFormat,
    'ERROR_CAPTCHA_UNSOLVABLE'       => TwoCaptcha::CaptchaUnsolvable,
    'ERROR_EMPTY_ACTION'             => TwoCaptcha::EmptyAction,
    'ERROR_GOOGLEKEY'                => TwoCaptcha::GoogleKey,
    'ERROR_CAPTCHAIMAGE_BLOCKED'     => TwoCaptcha::CaptchaImageBlocked,
    'ERROR_WRONG_CAPTCHA_ID'         => TwoCaptcha::WrongCaptchaId,
    'ERROR_BAD_DUPLICATES'           => TwoCaptcha::BadDuplicates,
    'REPORT_NOT_RECORDED'            => TwoCaptcha::ReportNotRecorded,
  }

  # HTTP
  class HTTP
    # Retrieve the contents of a captcha URL supporting HTTPS and redirects.
    #
    # @param [String] url The captcha URL.
    #
    # @return [String] The contents of the captcha URL.
    #
    def self.open_url(url)
      uri = URI(url)

      http = Net::HTTP.new(uri.host, uri.port)

      if uri.scheme == 'https'
        http.use_ssl = true
        http.verify_mode = OpenSSL::SSL::VERIFY_NONE
      end

      res = http.get(uri.request_uri)

      if (redirect = res.header['location'])
        open_url(redirect)
      else
        res.body
      end
    end

    # Perform an HTTP request with support to multipart requests.
    #
    # @param [Hash] options Options hash.
    # @param options [String] url      URL to be requested.
    # @param options [Symbol] method   HTTP method (:get, :post, :multipart).
    # @param options [Hash]   payload  Data to be sent through the HTTP request.
    # @param options [Integer] timeout HTTP open/read timeout in seconds.
    #
    # @return [String] Response body of the HTTP request.
    #
    def self.request(options = {})
      uri     = URI(options[:url])
      method  = options[:method] || :get
      payload = options[:payload] || {}
      timeout = options[:timeout] || 60
      headers = { 'User-Agent' => TwoCaptcha::USER_AGENT }

      case method
      when :get
        uri.query = URI.encode_www_form(payload)
        req = Net::HTTP::Get.new(uri.request_uri, headers)

      when :post
        req = Net::HTTP::Post.new(uri.request_uri, headers)
        req.set_form_data(payload)

      when :multipart
        req = Net::HTTP::Post.new(uri.request_uri, headers)
        boundary, body = prepare_multipart_data(payload)
        req.content_type = "multipart/form-data; boundary=#{boundary}"
        req.body = body

      else
        fail TwoCaptcha::ArgumentError, "Illegal HTTP method (#{method})"
      end

      http = Net::HTTP.new(uri.hostname, uri.port)
      http.use_ssl = true if (uri.scheme == 'https')
      http.open_timeout = timeout
      http.read_timeout = timeout
      res = http.request(req)
      res.body

    rescue Net::OpenTimeout, Net::ReadTimeout
      raise TwoCaptcha::Timeout
    end

    # Prepare the multipart data to be sent via a :multipart request.
    #
    # @param [Hash] payload Data to be prepared via a multipart post.
    #
    # @return [String, String] Boundary and body for the multipart post.
    #
    def self.prepare_multipart_data(payload)
      boundary = 'randomstr' + rand(1_000_000).to_s # a random unique string

      content = []
      payload.each do |param, value|
        content << '--' + boundary
        content << "Content-Disposition: form-data; name=\"#{param}\""
        content << ''
        content << value
      end
      content << '--' + boundary + '--'
      content << ''

      [boundary, content.join("\r\n")]
    end
  end
end